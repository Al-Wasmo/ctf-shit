from z3 import *
from pwn import *

def recover_B_matrix(A, wanted):
    M = len(A)
    N = 16  # fixed

    # Define B as 16 symbolic 8-bit values (B is 16x1)
    B = [BitVec(f'b_{k}', 8) for k in range(N)]
    solver = Solver()

    # For each row in A, enforce: dot(A[i], B) % 256 == wanted[i]
    for i in range(M):
        total = BitVecVal(0, 8)
        for k in range(N):
            total = (total + A[i][k] * B[k]) & 0xFF  # emulate uint8
        solver.add(total == wanted[i])

    # Constrain B[k] to be in 0..255 (uint8)
    for k in range(N):
        solver.add(ULE(B[k], 255))

    if solver.check() == sat:
        model = solver.model()
        return [model.evaluate(B[k], model_completion=True).as_long() for k in range(N)]
    else:
        return None
    

B = [[0, 81, 81, 174, 246, 244, 255, 206, 194, 228, 237, 151, 65, 132, 170, 238],
 [211, 211, 61, 81, 128, 107, 23, 97, 133, 198, 163, 97, 239, 110, 70, 17],
 [48, 48, 194, 82, 1, 130, 160, 14, 83, 247, 126, 88, 62, 194, 192, 196],
 [39, 39, 94, 46, 112, 156, 180, 85, 164, 10, 30, 123, 239, 140, 179, 174],
 [252, 252, 64, 173, 106, 154, 2, 193, 196, 180, 114, 181, 185, 125, 46, 228],
 [19, 19, 108, 222, 197, 207, 37, 139, 54, 57, 18, 153, 140, 225, 207, 4],
 [2, 2, 106, 167, 121, 9, 15, 79, 184, 79, 223, 223, 176, 163, 203, 229],
 [2, 2, 230, 219, 22, 24, 100, 3, 168, 11, 138, 192, 176, 85, 40, 90],
 [144, 144, 14, 206, 134, 76, 132, 137, 28, 5, 157, 42, 81, 169, 143, 254],
 [105, 105, 96, 87, 49, 238, 92, 90, 138, 95, 96, 218, 41, 167, 100, 122],
 [250, 250, 251, 141, 173, 172, 233, 190, 69, 129, 135, 177, 17, 167, 21, 34],
 [228, 228, 55, 82, 192, 134, 63, 229, 94, 79, 54, 114, 111, 159, 179, 64],
 [146, 146, 120, 213, 166, 105, 139, 63, 92, 103, 190, 222, 25, 111, 233, 38],
 [192, 192, 152, 164, 100, 41, 216, 251, 171, 56, 26, 226, 202, 164, 204, 99],
 [206, 206, 248, 39, 22, 203, 36, 99, 160, 229, 241, 114, 231, 93, 144, 165],
 [216, 216, 93, 188, 222, 42, 146, 200, 60, 130, 190, 194, 161, 50, 203, 132]]



C = [145,81,93,159,220,134,120,118,216,214,163,7,172,157,221,193]
s = recover_B_matrix(B,C)
print(hex(u64(bytes(s)[:8])))
print(hex(u64(bytes(s)[8:16])))